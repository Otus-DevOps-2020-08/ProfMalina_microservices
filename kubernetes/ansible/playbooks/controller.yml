---
- name: Install soft and create certs
  hosts: controllers
  become: true
  tasks:

  - name: Unarchive a file
    unarchive:
      src: https://github.com/etcd-io/etcd/releases/download/v3.4.10/etcd-v3.4.10-linux-amd64.tar.gz
      dest: /home/yc-user/
      mode: '755'
      owner: yc-user
      group: yc-user
      remote_src: yes

  - name: Copy file
    copy: src=/home/yc-user/etcd-v3.4.10-linux-amd64/{{ item }} dest=/usr/local/bin/ remote_src=yes owner=yc-user mode='755'
    loop: [ 'etcd', 'etcdctl' ]

  - name: Create a directory if it does not exist
    file:
      path: /etc/etcd
      state: directory
      mode: '755'

  - name: Create a directory if it does not exist
    file:
      path: /var/lib/etcd
      state: directory
      mode: '0700'

  - name: Copy file
    copy: src=/home/yc-user/{{ item }} dest=/etc/etcd/ remote_src=yes
    loop: ['ca.pem', 'kubernetes-key.pem', 'kubernetes.pem']


  - name: Create the etcd.service systemd unit file
    shell:
      cmd: |
        INTERNAL_IP=$(curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip)
        ETCD_NAME=$(hostname -s)
        cat <<EOF | sudo tee /etc/systemd/system/etcd.service
        [Unit]
        Description=etcd
        Documentation=https://github.com/coreos

        [Service]
        Type=notify
        ExecStart=/usr/local/bin/etcd \\
          --name ${ETCD_NAME} \\
          --cert-file=/etc/etcd/kubernetes.pem \\
          --key-file=/etc/etcd/kubernetes-key.pem \\
          --peer-cert-file=/etc/etcd/kubernetes.pem \\
          --peer-key-file=/etc/etcd/kubernetes-key.pem \\
          --trusted-ca-file=/etc/etcd/ca.pem \\
          --peer-trusted-ca-file=/etc/etcd/ca.pem \\
          --peer-client-cert-auth \\
          --client-cert-auth \\
          --initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \\
          --listen-peer-urls https://${INTERNAL_IP}:2380 \\
          --listen-client-urls https://${INTERNAL_IP}:2379,https://127.0.0.1:2379 \\
          --advertise-client-urls https://${INTERNAL_IP}:2379 \\
          --initial-cluster-token etcd-cluster-0 \\
          --initial-cluster controller-0=https://10.240.0.10:2380,controller-1=https://10.240.0.11:2380,controller-2=https://10.240.0.12:2380 \\
          --initial-cluster-state new \\
          --data-dir=/var/lib/etcd
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

  - name: enable etcd
    systemd:
      name: etcd
      enabled: yes
      state: started

  - name: Create a directory if it does not exist
    file:
      path: /etc/kubernetes/config
      state: directory
      owner: root
      mode: '0755'

  - name: Download files
    get_url: url={{ item }} dest=/home/yc-user/ owner=yc-user mode='775'
    loop: [ "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-apiserver",
            "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-controller-manager",
            "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-scheduler",
            "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl" ]

  - name: Copy files
    copy: src=/home/yc-user/{{ item }} dest=/usr/local/bin/ remote_src=yes owner=yc-user mode='775'
    loop: [ 'kube-apiserver', 'kube-controller-manager',  'kube-scheduler', 'kubectl' ]

  - name: Create a directory if it does not exist
    file:
      path: /var/lib/kubernetes/
      state: directory
      mode: '0755'

  - name: Copy file
    copy: src=/home/yc-user/{{ item }} dest=/var/lib/kubernetes/ remote_src=yes
    loop: [ 'ca.pem', 'ca-key.pem',  'kubernetes-key.pem', 'kubernetes.pem', 'service-account-key.pem', 'service-account.pem', 'encryption-config.yaml' ]

  - name: Create the kube-apiserver.service systemd unit file
    shell:
      cmd: |
        INTERNAL_IP=$(curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip)

        cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \\
          --advertise-address=${INTERNAL_IP} \\
          --allow-privileged=true \\
          --apiserver-count=3 \\
          --audit-log-maxage=30 \\
          --audit-log-maxbackup=3 \\
          --audit-log-maxsize=100 \\
          --audit-log-path=/var/log/audit.log \\
          --authorization-mode=Node,RBAC \\
          --bind-address=0.0.0.0 \\
          --client-ca-file=/var/lib/kubernetes/ca.pem \\
          --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
          --etcd-cafile=/var/lib/kubernetes/ca.pem \\
          --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
          --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
          --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379 \\
          --event-ttl=1h \\
          --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
          --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
          --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
          --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
          --kubelet-https=true \\
          --runtime-config='api/all=true' \\
          --service-account-key-file=/var/lib/kubernetes/service-account.pem \\
          --service-cluster-ip-range=10.32.0.0/24 \\
          --service-node-port-range=30000-32767 \\
          --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
          --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

  - name: Copy file
    copy: src=/home/yc-user/{{ item }} dest=/var/lib/kubernetes/ remote_src=yes owner=yc-user mode='600'
    loop: [ 'kube-controller-manager.kubeconfig' ]

  - name: Create the kube-controller-manager.service systemd unit file
    shell:
      cmd: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \\
          --bind-address=0.0.0.0 \\
          --cluster-cidr=10.200.0.0/16 \\
          --cluster-name=kubernetes \\
          --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
          --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
          --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\
          --leader-elect=true \\
          --root-ca-file=/var/lib/kubernetes/ca.pem \\
          --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \\
          --service-cluster-ip-range=10.32.0.0/24 \\
          --use-service-account-credentials=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

  - name: Copy file
    copy:
      src: /home/yc-user/kube-scheduler.kubeconfig
      dest: /var/lib/kubernetes/
      mode: '600'
      owner: yc-user
      remote_src: yes

  - name: Create the kube-scheduler.yaml configuration file and Create the kube-scheduler.service systemd unit file
    shell:
      cmd: |
        cat <<EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yaml
        apiVersion: kubescheduler.config.k8s.io/v1alpha1
        kind: KubeSchedulerConfiguration
        clientConnection:
          kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
        leaderElection:
          leaderElect: true
        EOF


        cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \\
          --config=/etc/kubernetes/config/kube-scheduler.yaml \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

  - name: Start the Controller Services
    systemd: name={{ item }} enabled=yes state=started
    loop: [ 'kube-apiserver', 'kube-controller-manager', 'kube-scheduler' ]

  - name: Install a basic web server to handle HTTP health checks
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'nginx']

  - name: Enable HTTP Health Checks
    shell:
      cmd: |
        cat > kubernetes.default.svc.cluster.local <<EOF
        server {
          listen      80;
          server_name kubernetes.default.svc.cluster.local;

          location /healthz {
            proxy_pass                    https://127.0.0.1:6443/healthz;
            proxy_ssl_trusted_certificate /var/lib/kubernetes/ca.pem;
          }
        }
        EOF

  - name: Copy file
    copy: src=/home/yc-user/{{ item }} dest=/etc/nginx/sites-available/kubernetes.default.svc.cluster.local remote_src=yes owner=yc-user mode='664' backup=yes
    loop: [ 'kubernetes.default.svc.cluster.local' ]

  - name: Create the kube-scheduler.yaml configuration file and Create the kube-scheduler.service systemd unit file
    shell:
      cmd: |
        sudo ln -s /etc/nginx/sites-available/kubernetes.default.svc.cluster.local /etc/nginx/sites-enabled/

  - name: Start the nginx
    systemd: name=nginx enabled=yes state=restarted
